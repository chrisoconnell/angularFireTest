type Hero {
    id: Number,
    name: NameString
}

type UserLog {
    by: UserId,
    on: Timestamp
}

type HeroHistory {
    created: UserLog,
    history: History[]
}

type History {
    data: Hero,
    timestamp: Timestamp,
    uid: UserId
}

type Timestamp extends Number {
    validate() {this == now}
}

type UserId extends String {
    validate() {this == auth.uid}
}

type NameString extends String {
  validate() {this.length > 0 && this.length <= 32}
}

isUser(uid) {auth != null && auth.uid == uid}
isLoggedIn() {auth != null}

// Only logged in users can read list of heroes
path /hero {
    read() {isLoggedIn()}
}

// Only logged in users can create and delete Heroes. Heroes cannot be updated.
path /hero/{id} is Hero {
    create() {isLoggedIn()}
    update() {false}
    delete() {isLoggedIn()}
}

// Users can only write to hero-history
path /hero-history/{id}  is HeroHistory {
    create() {isLoggedIn()}
    update() {false}
    delete() {false}
}

path /hero-history/{id}/history/{id} {
    update() {isLoggedIn()}
}

path /user {
    read() {isLoggedIn()}
    write() {isLoggedIn()}
}

path /random-user {
    read() {isLoggedIn()}
    write() {isLoggedIn()}
}